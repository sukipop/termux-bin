#!/usr/bin/env zsh

# Define Termux variavles
set -e
: "${TERMUX_APP_PACKAGE:="com.termux"}"
: "${TERMUX_PREFIX:="/data/data/${TERMUX_APP_PACKAGE}/files/usr"}"
: "${TERMUX_ANDROID_HOME:="/data/data/${TERMUX_APP_PACKAGE}/files/home"}"

# Define script variables
script_name="${0##*/}"
verbose=0
special_argument=""
eg_flag=""

# Function to display help message
function print_usage {
    print
    print "Usage: ${script_name} [options]"
    print
    print "My eventual zsh template for termux."
    print
    print "Template is zsh focused, so it should prioritize zsh syntax,"
    print "commands, and best practices over compatibility with other shells."
    print
    print "Arguments:"
    print "  <argument>      Some argument."
    print
    print "Options:"
    print "  -h, --help      Display this help message."
    print "  -o, --option <value>"
    print "                  Some option."
    print
}

# Function to print error message
function error {
    local message="${1:-Unknown error}"
    local color="${COLOR_RED:-#ff0000}"
    print -P "%B%F{$color}Error%f:%b $message" >&2
}

# Function to check for required packages
function pkg_check {
    local requirements=()
    local missing_pkgs=()

    # Check for missing packages
    for pkg in "${requirements[@]}"; do
        if ! command -v "$pkg" &> /dev/null; then
            missing_pkgs+=("$pkg")
        fi
    done

    # Display error if missing packages
    if [[ "${#missing_pkgs[@]}" -gt 0 ]]; then
        error "Missing packages: ${missing_pkgs[*]}"
        return 1
    fi
}

# Ensure required packages are accessible
pkg_check || exit 1

# Get some help
if [[ "$#" -eq 0 ]]; then
    error "Missing Value for argument"
    print_usage
    exit 1
fi

# Parse arguments
while (( "$#" )); do case "$1" in
    # Get some help
    -h|--help|--help-all|-help|help)
        print_usage
        exit 0
        ;;

    # Define 'eg_flag'
    -o|--option)
        if [[ -z "$2" || "$2" == -* ]]; then
            error "Missing value for $1"
            print_usage
            exit 1
        fi
        eg_flag="$2"
        shift
        ;;

    # Handel unknown options
    -*)
        error "Unknown option: $1"
        print_usage
        exit 1
        ;;

    # Define 'special_argument'
    *)
        if [[ -n "$special_argument" ]]; then
            error "Unknown argument: $1"
            print_usage
            exit 1
        fi
        special_argument="$1"
        ;;
    esac
    shift
done

() {
    (( "$verbose" )) && print -P "%BStarting ${0##*/}...%b"

    # Script logic here
    print -P "%B${script_name} variables%b:"
    print -P "%B%F{4}special_argument%f:%b ${special_argument:-undefined}"
    print -P "%B%F{4}eg_flag%f:%b ${eg_flag:-undefined}"

    # Terminate script
    print "\nDone!"
    return 0
}

exit "$?"
