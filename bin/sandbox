#!/usr/bin/env zsh
script_name="${0##*/}"
verbose=0
special_argument=""
eg_flag=""

# Function to display help message
function print_usage {
    cat <<- EOF

Usage: ${script_name} [options]

My eventual zsh template for termux.

Template is zsh focused, so it should prioritize zsh syntax,
commands, and best practices over compatibility with other shells.

Arguments:
  <argument>      Some argument.

Options:
  -h, --help      Display this help message.
  -o, --option <value>
                  Some option.

EOF
}

# Function to print error message
function error {
    local m="${1:-Unknown error}"
    local color="${COLOR_RED:-#ff0000}"
    print -P "%B%F{$color}Error%f:%b $message" >&2
}

# Function to check for required packages
function pkg_check {
    local requirements=()
    local missing_pkgs=()

    # Check for missing packages
    for pkg in "${requirements[@]}"; do
        if ! command -v "$pkg" &>/dev/null; then
            missing_pkgs+=("$pkg")
        fi
    done

    # Display error if missing packages
    if [[ "${#missing_pkgs[@]}" -gt 0 ]]; then
        error "Missing packages: ${missing_pkgs[*]}"
        return 1
    fi
}

# Function to parse arguments
function parse_arguments {
    while (( "$#" )); do
        case "$1" in
            -h|--help|--help-all|-help|help)
                print_usage
                exit 0
                ;;
            -o|--option)
                if [[ -z "$2" || "$2" == -* ]]; then
                    error "Missing value for $1"
                    print_usage
                    exit 1
                fi
                eg_flag="$2"
                shift
                ;;
            -*)
                error "Unknown option: $1"
                print_usage
                exit 1
                ;;
            *)
                if [[ -n "$special_argument" ]]; then
                    error "Unknown argument: $1"
                    print_usage
                    exit 1
                fi
                special_argument="$1"
                ;;
        esac
        shift
    done
}

# Main script execution
() {
    pkg_check || exit 1

    if [[ "$#" -eq 0 ]]; then
        error "Missing value for argument"
        print_usage
        exit 1
    fi

    (( "$verbose" )) && print -P "%BStarting ${script_name}...%b"

    # Script logic here
    print -P "%B${script_name} variables%b:"
    print -P "%B${color_red}special_argument:${color_reset}%b ${special_argument:-undefined}"
    print -P "%B${color_red}eg_flag:${color_reset}%b ${eg_flag:-undefined}"

    print "\nDone!"
}
