#!/usr/bin/env zsh
argument=""
option=""

# Function to display help message
function print_usage {
    print
    print "Usage: ${0##*/} [options]"
    print
    print "Zsh script template."
    print
    print "Arguments:"
    print "  <argument>      Some argument."
    print
    print "Options:"
    print "  -h, --help      Display this help message."
    print "  -o, --option <value>"
    print "                  Some option."
    print
}

# Function to print error message
function error {
    local message="${1:-Unknown error}"
    local color="${COLOR_RED:-#ff0000}"
    print -P "%B%F{$color}Error%f:%b $message" >&2
}

# Function to check for required packages
function pkg_check {
    local requirements=()
    local missing_pkgs=()

    # Check for missing packages
    for pkg in "${requirements[@]}"; do
        if ! command -v "$pkg" &> /dev/null; then
            missing_pkgs+=("$pkg")
        fi
    done

    # Display error if missing packages
    if [[ "${#missing_pkgs[@]}" -gt 0 ]]; then
        error "Missing packages: ${missing_pkgs[*]}"
        return 1
    fi
}

# Ensure required packages are accessible
pkg_check || exit 1

# Get some help
if [[ "$#" -eq 0 ]]; then
    print_usage
    exit 1
fi

# Parse arguments
while (( "$#" )); do case "$1" in
    # Get some help
    -h|--help|--help-all|-help|help)
        print_usage
        exit 0
        ;;

    # Define 'option'
    -o|--option)
        if [[ -z "$2" || "$2" == -* ]]; then
            error "Missing value for $1"
            print_usage
            exit 1
        fi
        option="$2"
        shift
        ;;

    # Handel unknown options
    -*)
        error "Unknown option: $1"
        print_usage
        exit 1
        ;;

    # Define argument
    *)
        if [[ -n "$argument" ]]; then
            error "Unknown argument: $1"
            print_usage
            exit 1
        fi
        argument="$1"
        ;;
    esac
    shift
done

# Terminate script
print "Done!"
exit 0
